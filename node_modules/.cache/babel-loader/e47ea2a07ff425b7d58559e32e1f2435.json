{"ast":null,"code":"import _initializerDefineProperty from \"/home/nishitaprajapati/Desktop/Simform/react-mobx-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/home/nishitaprajapati/Desktop/Simform/react-mobx-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/home/nishitaprajapati/Desktop/Simform/react-mobx-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _temp;\n\nimport { computed, observable, autorun } from \"mobx\";\nlet Store = (_class = (_temp = class Store {\n  constructor() {\n    _initializerDefineProperty(this, \"todos\", _descriptor, this);\n\n    autorun(() => console.log(this.report));\n  }\n\n  get completedCount() {\n    return this.todos.filter(todo => todo.completed).length;\n  }\n\n  get report() {\n    return `Progress: ${this.completedCount}/${this.todos.length}`;\n  }\n\n  add(task) {\n    this.todos.push({\n      task,\n      completed: false\n    });\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"todos\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"completedCount\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"completedCount\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"report\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"report\"), _class.prototype)), _class);\nexport default Store;","map":{"version":3,"sources":["/home/nishitaprajapati/Desktop/Simform/react-mobx-app/src/Store.js"],"names":["computed","observable","autorun","Store","constructor","console","log","report","completedCount","todos","filter","todo","completed","length","add","task","push"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,OAA/B,QAA8C,MAA9C;IAEMC,K,sBAAN,MAAMA,KAAN,CAAY;AAGVC,EAAAA,WAAW,GAAG;AAAA;;AACZF,IAAAA,OAAO,CAAC,MAAMG,OAAO,CAACC,GAAR,CAAY,KAAKC,MAAjB,CAAP,CAAP;AACD;;AAE2B,MAAdC,cAAc,GAAG;AAC7B,WAAO,KAAKC,KAAL,CAAWC,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACC,SAAjC,EAA4CC,MAAnD;AACD;;AAEmB,MAANN,MAAM,GAAG;AACrB,WAAQ,aAAY,KAAKC,cAAe,IAAG,KAAKC,KAAL,CAAWI,MAAO,EAA7D;AACD;;AAEDC,EAAAA,GAAG,CAACC,IAAD,EAAO;AACR,SAAKN,KAAL,CAAWO,IAAX,CAAgB;AACdD,MAAAA,IADc;AAEdH,MAAAA,SAAS,EAAE;AAFG,KAAhB;AAID;;AApBS,C,+EACTX,U;;;;;WAAmB,E;;mEAMnBD,Q,kJAIAA,Q;AAYH,eAAeG,KAAf","sourcesContent":["import { computed, observable, autorun } from \"mobx\";\n\nclass Store {\n  @observable todos = [];\n\n  constructor() {\n    autorun(() => console.log(this.report));\n  }\n\n  @computed get completedCount() {\n    return this.todos.filter((todo) => todo.completed).length;\n  }\n\n  @computed get report() {\n    return `Progress: ${this.completedCount}/${this.todos.length}`;\n  }\n\n  add(task) {\n    this.todos.push({\n      task,\n      completed: false,\n    });\n  }\n}\n\nexport default Store;\n"]},"metadata":{},"sourceType":"module"}